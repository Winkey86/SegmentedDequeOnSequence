# TEST FOR INT
CREATE dqInt INT
PUSH_BACK 10
PUSH_FRONT 3
PUSH_BACK 7
PRINT
SORT
PRINT
POP_FRONT
PRINT

# TEST FOR DOUBLE
CREATE dqDouble DOUBLE
PUSH_BACK 1.5
PUSH_FRONT 2.5
PUSH_BACK 3.5
PRINT
SORT
PRINT
POP_BACK
PRINT

# TEST FOR STRING
CREATE dqStr STRING
PUSH_BACK Hello
PUSH_FRONT World
PUSH_BACK Test
PRINT
POP_FRONT
PRINT

# TEST FOR COMPLEX (FORMAT: REAL,IMAG)
CREATE dqComplex COMPLEX
PUSH_BACK 1.0,2.0
PUSH_FRONT 3.0,4.0
PUSH_BACK 5.0,6.0
PRINT
POP_BACK
PRINT

# TEST FOR FUNCTION
CREATE dqFunc FUNCTION
PUSH_BACK inc1
PUSH_BACK inc2
PUSH_BACK inc3
PRINT

# TEST FOR PERSON
CREATE dqPerson PERSON
PUSH_BACK John_Doe
PUSH_FRONT Jane_Smith
PUSH_BACK Alice_Jones
PRINT

# ADDITIONAL TESTS:
# CREATE A SECOND INT DEQUE FOR CONCAT
CREATE dqInt2 INT
PUSH_BACK 100
PUSH_BACK 200
PRINT

# SWITCH TO EXISTING dqInt
SELECT dqInt
LIST

# CONCAT dqInt WITH dqInt2; RESULT STORED AS dqInt_CONCAT
CONCAT dqInt2
SELECT dqInt_CONCAT
PRINT
